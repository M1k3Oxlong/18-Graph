public List<Vertex> getVertices(){
    List<Vertex> result = new List<Vertex>();

    result.concat(vertices);
    //TODO 01: Einmal Liste kopieren, bitte! Warum eigentlich kopieren? (O_o)

    result.toFirst();

    return result;
  }

  /**
   * Die Anfrage liefert eine neue Liste aller Kantenobjekte vom Typ List<Edge>.
   * Nachdem die Ergebnisliste fertiggestellt wurde, wird ihr erstes Element das aktuelle Element innerhalb dieser Liste.
   */
  public List<Edge> getEdges(){
    //Eine neue Liste mit allen Edge-Objekten erstellen.
    List<Edge> result = new List<Edge>();

    result.concat(edges);
    //TODO 02: Und nochmal kopieren.

    //Aktuelles Element zum Anfang bewegen.
    result.toFirst();

    return result;
  }

  /**
   * Die Anfrage liefert das Knotenobjekt mit pID als ID. Ist ein solches Knotenobjekt nicht im Graphen enthalten,
   * wird null zurueckgeliefert.
   */
  public Vertex getVertex(String pID){
    Vertex output;

    vertices.toFirst();
    while(vertices.hasAccess()){
      if(vertices.getContent().getID().equalsIgnoreCase(pID))  return vertices.getContent();
      vertices.next();
    }
    //TODO 03: Knoten-Objekt finden.

    return null;
  }

  /**
   * Der Auftrag fuegt den Knoten pVertex in den Graphen ein, sofern es noch keinen
   * Knoten mit demselben ID-Eintrag wie pVertex im Graphen gibt und pVertex eine ID ungleich null hat. 
   * Ansonsten passiert nichts.
   */
  public void addVertex(Vertex pVertex){
    //TODO 04: Neues Knoten-Objekt hinzuf√ºgen.
    vertices.toFirst();
    while(vertices.hasAccess() && !pVertex.getID().equalsIgnoreCase(vertices.getContent().getID())){
      vertices.next();
    }

    if(!vertices.hasAccess()){
      vertices.append(pVertex);
    }

  }
